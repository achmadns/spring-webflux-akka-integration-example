## default connection pool
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5
## PostgreSQL
address.db=postgresql://localhost:5432/postgres
spring.datasource.url=jdbc:${address.db}
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
spring.r2dbc.url=r2dbc:${address.db}
spring.r2dbc.username=${spring.datasource.username}
spring.r2dbc.password=${spring.datasource.password}
# Naming strategy
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#drop n create table again, good for testing, comment this in production
spring.jpa.hibernate.ddl-auto=create-drop
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
javax.persistence.schema-generation.scripts.action=drop-and-create
javax.persistence.schema-generation.scripts.create-target=create.sql
javax.persistence.schema-generation.scripts.drop-target=drop.sql
javax.persistence.schema-generation.create-source=metadata
javax.persistence.schema-generation.drop-source=metadata
spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata
akka.stream.alpakka.spring.web.actor-system-name=simjim-showcase
kafka.bootstrapAddress=localhost:9092
kafka.groupId=transaction